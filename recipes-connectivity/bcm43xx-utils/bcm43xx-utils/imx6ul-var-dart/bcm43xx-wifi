#!/bin/sh -e
#
# Activate WIFI on Variscite DART-6UL / VAR-SOM-6UL
#

# Include common functions
. /etc/wifi/variscite-wireless

# GPIO pin to supply power to WIFI module on DART-6UL-5G
WIFI_PWR_GPIO="gpiochip4 2"

# GPIO pin to enable WIFI module
WIFI_EN_GPIO="gpiochip4 6"

# GPIO pin to enable BT module
BT_EN_GPIO="gpiochip4 4"

# WIFI MMC host
WIFI_MMC_HOST=2190000.mmc
WIFI_MMC_PATH="/sys/bus/platform/drivers/sdhci-esdhc-imx"

# Check is SOM is DART-6UL-5G
som_is_dart_6ul_5g()
{
	SOM_INFO=`i2cget -y 1 0x51 0xfd`
	if [[ $(($(($SOM_INFO >> 3)) & 0x3)) == 1 ]] ; then
		return 0
	fi

	return 1
}

# Power up WIFI chip
wifi_up()
{
	# Unbind WIFI device from MMC controller
	wifi_mmc_unbind ${WIFI_MMC_PATH} ${WIFI_MMC_HOST}

	if som_is_dart_6ul_5g; then
		# WIFI power up
		gpioset ${WIFI_PWR_GPIO}=1
		usleep 10000

		# WLAN_EN up
		gpioset ${WIFI_EN_GPIO}=1

		# BT_EN up
		gpioset ${BT_EN_GPIO}=1
	
		# Wait 150ms at least
		usleep 200000
	
		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
	else
		# WLAN_EN up
		gpioset ${WIFI_EN_GPIO}=1

		# BT_EN up
		gpioset ${BT_EN_GPIO}=1
	
		# Wait 150ms at least
		usleep 200000
	
		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
	fi
	
	# Bind WIFI device to MMC controller
	wifi_mmc_bind ${WIFI_MMC_PATH} ${WIFI_MMC_HOST}

	# Load WIFI driver
	modprobe brcmfmac
}

# Power down WIFI chip
wifi_down()
{
	# Unload WIFI driver
	modprobe -r brcmfmac

	# Unbind WIFI device from MMC controller
	wifi_mmc_unbind ${WIFI_MMC_PATH} ${WIFI_MMC_HOST}

	if som_is_dart_6ul_5g; then
		# WLAN_EN down
		gpioset ${WIFI_EN_GPIO}=0

		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
		usleep 10000

		# WIFI power down
		gpioset ${WIFI_PWR_GPIO}=0
	else
		# WLAN_EN down
		gpioset ${WIFI_EN_GPIO}=0

		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
	fi
}

# Return true if WIFI should be started
wifi_should_not_be_started()
{
	# Do not enable WIFI if it is already up
	[ -d /sys/class/net/wlan0 ] && return 0

	# Do not enable WIFI if booting from SD          
	if grep -q mmcblk0 /proc/cmdline; then
		return 0
	fi

	# Exit if booting from eMMC without WIFI
	if ! grep -qi WIFI /sys/devices/soc0/machine; then
		return 0
	fi

	return 1
}

# Return true if WIFI should not be stopped
wifi_should_not_be_stopped()
{
	# Do not stop WIFI if booting from SD
	if grep -q mmcblk0 /proc/cmdline; then
		return 0
	fi

	# Do not stop WIFI if booting from eMMC without WIFI
	if ! grep -qi WIFI /sys/devices/soc0/machine; then
		return 0
	fi

	return 1
}

# Start WIFI hardware
wifi_start()
{
	# Exit if WIFI should not be started
	wifi_should_not_be_started && exit 0

	# Try starting WIFI hardware
	for i in $(seq 1 3); do
		# Up WIFI
		wifi_up

		# Exit if WIFI interface exists
		wifi_interface_exists "wlan0" && exit 0

		# Down WIFI
		wifi_down

		# Wait enough time for discharge
		sleep 5
	done

	exit 1
}

# Stop WIFI hardware
wifi_stop()
{
	# Exit if WIFI should not be stopped
	wifi_should_not_be_stopped && exit 0

	# Down WIFI
	wifi_down
}

###########################
#  Execution starts here  #
###########################
case $1 in
start)
	wifi_start
	;;
stop)
	wifi_stop
	;;
esac

exit 0
